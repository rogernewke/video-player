apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    flavorDimensions "target", "abi"

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    task luaPlaylistCopy(type: Copy) {
        from '../vlc/share/lua/playlist'
        into 'assets/lua/playlist'
        exclude '**/*.txt'
    }

    task luaMetaCopy(type: Copy) {
        from '../vlc/share/lua/meta'
        into 'assets/lua/meta'
        exclude '**/*.txt'
    }

    dataBinding {
        enabled = true
    }

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId 'media.videoplayer.lite'

        minSdkVersion 11
        versionCode 6
        versionName '2.1'

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
        resValue "string", "build_vlc_revision", vlcRevision()

        tasks.whenTaskAdded { task ->
            if (task.name.startsWith('assemble')) {
                task.dependsOn luaPlaylistCopy
                task.dependsOn luaMetaCopy
            }
        }

        //Set the build ABI according to build types only if not launched from compile.sh
        if (System.getenv('PASSWORD_KEYSTORE') == null)
            tasks.whenTaskAdded { task ->
                if (task.name.startsWith('assemble')) {
                    if (task.name.endsWith('ARMv5Debug'))
                        task.dependsOn(":libvlc:buildDebugARMv5")
                    else if (task.name.endsWith('ARMv6fpuDebug'))
                        task.dependsOn(":libvlc:buildDebugARMv6")
                    else if (task.name.endsWith('ARMv6nofpuDebug'))
                        task.dependsOn(":libvlc:buildDebugARMv6_nofpu")
                    else if (task.name.endsWith('ARMv7Debug'))
                        task.dependsOn(":libvlc:buildDebugARMv7")
                    else if (task.name.endsWith('ARMv8Debug'))
                        task.dependsOn(":libvlc:buildDebugARM64")
                    else if (task.name.endsWith('X86Debug'))
                        task.dependsOn(":libvlc:buildDebugx86")
                    else if (task.name.endsWith('X86_64Debug'))
                        task.dependsOn(":libvlc:buildDebugx86_64")
                    else if (task.name.endsWith('MIPSDebug'))
                        task.dependsOn(":libvlc:buildDebugMIPS")
                    else if (task.name.endsWith('MIPS64Debug'))
                        task.dependsOn(":libvlc:buildDebugMIPS64")
                }
            }
    }

    signingConfigs {

        release {
            /*
            To set this properties, create file gradle.properties with these 3 props.
            e.g.
            keyStoreFile=/home/<username>/.android/debug.keystore
            storealias=androiddebugkey
            storepwd=android
             */
//            storeFile file("/Users/user/Documents/mifly_svn/mf_private/gp/kwonglab.yahoo/keystore")
//            keyAlias "wongkey"
//            if (System.getenv('PASSWORD_KEYSTORE') != null && !System.getenv('PASSWORD_KEYSTORE').isEmpty()){
//                storePassword = System.getenv('PASSWORD_KEYSTORE')
//                keyPassword = System.getenv('PASSWORD_KEYSTORE')
//            } else {
//                storePassword "kwong2015"
//                keyPassword "kwong2015"
//            }


            storeFile file(keyStoreFile)
            keyAlias storealias
            if (System.getenv('PASSWORD_KEYSTORE') != null && !System.getenv('PASSWORD_KEYSTORE').isEmpty()){
                storePassword = System.getenv('PASSWORD_KEYSTORE')
                keyPassword = System.getenv('PASSWORD_KEYSTORE')
            } else {
                storePassword storepwd
                keyPassword storepwd
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            proguardFile 'proguard.cfg'
        }
        debug {
            applicationIdSuffix ".debug"
            jniDebuggable true
        }
    }
    productFlavors {
        vanilla {
            dimension "target"
            versionCode = 6
        }
        chrome {
            minSdkVersion 19
            dimension "target"
            versionCode = 6
        }
        ARMv5 {
            dimension "abi"
            versionCode = 6
        }
        ARMv6nofpu {
            dimension "abi"
            versionCode = 6
        }
        ARMv6fpu {
            dimension "abi"
            versionCode = 6
        }
        ARMv7 {
            dimension "abi"
            versionCode = 6
        }
        x86 {
            dimension "abi"
            versionCode = 6
        }
        MIPS {
            dimension "abi"
            versionCode = 6
        }
        ARMv8 {
            dimension "abi"
            versionCode = 6
        }
        x86_64 {
            dimension "abi"
            versionCode = 6
        }
        MIPS64 {
            dimension "abi"
            versionCode = 6
        }
    }

    // make per-variant version code
    applicationVariants.all { variant ->
        def manifestParser = new com.android.builder.core.DefaultManifestParser()
        // get the version code of each flavor
        def vlcVersion = '2.2'
        def targetVersion = variant.productFlavors.get(0).versionCode
        def abiVersion = variant.productFlavors.get(1).versionCode

        // set the composite code
        variant.mergedFlavor.versionCode = 6
        variant.mergedFlavor.versionName = 2.1

        //Custom APK name
        variant.outputs.each { output ->
            def outputName = "VLC-Android-"
            if (!variant.productFlavors.get(0).name.equals("vanilla"))
                outputName += variant.productFlavors.get(0).name.toUpperCase() + "-"
            outputName += vlcVersion + "-" + variant.productFlavors.get(1).name + ".apk"
//            output.outputFile = new File(output.outputFile.parentFile, outputName);

            //set intents with correct package name
//            output.processManifest.doLast{
//                def manifestOutFile = output.processManifest.manifestOutputFile
//                def newFileContents = manifestOutFile.getText('UTF-8').replace("_PACKAGENAME_", variant.applicationId)
//                manifestOutFile.write(newFileContents, 'UTF-8')
//            }
        }
    }

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
    }
//    sourceSets.release {
//        manifest.srcFile 'flavors/release/AndroidManifest.xml'
//    }
    sourceSets.test {
        java.srcDirs = ['test']
    }
    sourceSets.chrome {
        manifest.srcFile 'flavors/chrome/AndroidManifest.xml'
        res.srcDirs = ['flavors/chrome/res']
    }
    buildToolsVersion '26.0.2'
}

dependencies {
    compile project(':libvlc')
    compile project(':api')
    compile project(':axmlrpc')
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:cardview-v7:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support:support-annotations:23.1.1'
    compile 'com.android.support:preference-v7:23.1.1'
    compile 'com.android.support:percent:23.1.1'
    compile 'com.android.support:leanback-v17:23.1.1'
    compile 'com.android.support:preference-leanback-v17:23.1.1'
    compile 'com.google.android.gms:play-services-ads:9.2.1'
    testCompile 'junit:junit:4.12'
}

def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
       workingDir '../vlc'

        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString()
}

def vlcRevision() {
    def code = new ByteArrayOutputStream()
    def vlc = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        workingDir '../vlc'
        standardOutput = vlc
    }
    return vlc.toString()
}
